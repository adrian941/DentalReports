@page "/pdf/{id}"
@using System.Security.Claims
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<head>

    <link rel="stylesheet" href="css/megagen.css">
    <link rel="stylesheet" href="css/pdf.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js" async></script>

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="og:title" content="@ogTitle">
</head>



<div class="megagen-upper-btns-container fixed">
    <button class="menu-button button-35w button-black " @onclick="OpenMenu"></button>
    <button class="pdf-button button-35w button-white"  @onclick="OpenPdf"></button>
    <button class="stl-button button-35w button-white" @onclick="OpenStl"></button>
    <button class="video-button button-35w button-white" @onclick="OpenVideo"></button>
  
</div>

@if (@PdfSource != null)
{
    
    <div id="pdfViewer"></div>
}





@code {

    private string ogTitle = "Megagen Reports";

    [Parameter]
    public string? Id { get; set; }
    DisplayPatient displayPatient = new DisplayPatient();

    private string PdfSource = @"";





    private void OpenPdf()
    {
        navigationManager.NavigateTo($"pdf/{Id}",true);
    }

    private void OpenStl()
    {
        if (displayPatient.HasStl)
        {
            navigationManager.NavigateTo($"3d-viewer/{Id}");
        }
        else
        {
            //TODO: Show Message
        }

    }
    private void OpenMenu()
    {

        navigationManager.NavigateTo($"/");
    }
    private void OpenVideo()
    {
        if (displayPatient.HasVideo)
        {
            navigationManager.NavigateTo($"video/{Id}");
        }
        else
        {
            //TODO: Show Message
        }

    }





    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            ClaimsPrincipal? currentUser = null;
            string role = "";

            try
            {
                currentUser = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
                role = currentUser.Claims.Where(c => c.Type == "role").First().Value;
            }catch(Exception)
            {
                //navigate to Login Page
                navigationManager.NavigateTo($"/Login", true);
                return;
            }

        if (role == RolesMegagen.Technician)
            {
                try
                {
                    displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/technician/getPatient/{Id}"))!;
                }
                catch (Exception)
                {
                    navigationManager.NavigateTo($"/NotAuthorized", true);
                    return;
                }
                if (displayPatient == null)
                {
                    navigationManager.NavigateTo($"/NotAuthorized");
                    return;
                }






            }
            if (role == RolesMegagen.Doctor)
            {
                try
                {
                    displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/doctor/getPatient/{Id}"))!;
                }
                catch (Exception)
                {
                    navigationManager.NavigateTo($"/NotAuthorized", true);
                    return;
                }
                if (displayPatient == null)
                {
                    navigationManager.NavigateTo($"/NotAuthorized", true);
                    return;
                }
            }

            ogTitle = $"{displayPatient.FirstName} {displayPatient.LastName}";

            string pdfFileName = displayPatient.Files.Where(f => f.Name.Trim().ToLower().EndsWith(".pdf")).First().Name;

            PdfSource = await _httpClient.GetStringAsync($"/api/Storage/getFileLink/{pdfFileName}");

            await _jsRuntime.InvokeVoidAsync("openMegagenPdf", PdfSource);
        }
    }

}