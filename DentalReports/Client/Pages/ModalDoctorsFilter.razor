 
<EditForm Model="OriginalDoctors" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">

        @foreach (var doctorViewModel in DisplayDoctors.OrderBy(d => d.Doctor.FirstName).ThenBy(d => d.Doctor.LastName))
        {
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="@($"checkbox_{doctorViewModel.Doctor.Id}")" @bind="doctorViewModel.IsChecked" />
                <label class="form-check-label" for="@($"checkbox_{doctorViewModel.Doctor.Id}")">
                    @doctorViewModel.Doctor.FirstName @doctorViewModel.Doctor.LastName   <span style="font-size:0.8em"> @($"({doctorViewModel.Doctor.Email})") </span>
                </label>
            </div>
        }


    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>


@code {

    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }


    [Parameter] public List<DisplayDoctor>? OriginalDoctors { get; set; }

    public List<DisplayDoctor>? FilteredDoctors = new List<DisplayDoctor>();

    public List<DisplayDoctorViewModel> DisplayDoctors { get; set; } = new List<DisplayDoctorViewModel>();

    protected override void OnInitialized()
    {
        FilteredDoctors = OriginalDoctors;
        foreach (var Doctor in OriginalDoctors!)
        {
            DisplayDoctors.Add(new DisplayDoctorViewModel { Doctor = Doctor, IsChecked = false });
        }

    }

    private async void HandleValidSubmit()
    {
        FilteredDoctors = DisplayDoctors.Where(x => x.IsChecked).Select(x => x.Doctor).ToList();
        await ModalInstance!.CloseAsync(ModalResult.Ok(FilteredDoctors));
        await ModalInstance!.CancelAsync();
    }


    public class DisplayDoctorViewModel
    {
        public DisplayDoctor Doctor { get; set; } = new DisplayDoctor();
        public bool IsChecked { get; set; }
    }

}