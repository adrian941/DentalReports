@page "/view-stl/{id}"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@using Microsoft.AspNetCore.Components
@inject AuthenticationStateProvider _authenticationStateProvider


@inject IJSRuntime jsInterop



@inject NavigationManager navigationManager

<head>
    <link rel="stylesheet" href="css/megagen.css">
    <link rel="stylesheet" href="css/stl.css">
 
    <script>
        function destroyContainer() {

            var element = document.querySelector('.big-container');
            if (element) {
                element.remove();
            }

            window.spanLoading = document.getElementById('loading-span');
            spanLoading.style.display = 'visible';
            spanLoading.style.zIndex = 50;
            spanLoading.textContent = 'Loading 3D Models...';
        }
    </script>

</head>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const header = document.getElementById("header");
        header.style.display = "none";
    });
</script>
<script>
    function emptyCacheAndReload() {
        -buttonthen(function (cacheNames) {
            cacheNames.forEach(function (cacheName) {
                caches.delete(cacheName);
            });
        });
        window.location.reload(true);
    }
</script>
<script type="text/javascript">
    function emptyCache() {
        caches.delete("blazor-resources-/").then(function (e) {
            console.log("'blazor-resources-/' cache deleted");
        });
    }


</script>

<div class="megagen-upper-btns-container fixed">
    <button class="pdf-button button-35w" @onclick="OpenPdf"></button>
    <button class="stl-button button-35w" ></button>

    <button class="video-button button-35w" @onclick="OpenVideo"></button>

    <button class="menu-button button-35w" @onclick="OpenMenu"></button>
    @* <button class="refresh-button button-35w" @onclick="Refresh"></button> *@
</div>
<canvas 
        id="canvas-webgl"
        class="webgl"
        style="width:95%;height:95vh; ">
</canvas>

<div id="loading-div">
    <h2 id="loading-span"></h2>
</div>



@code {

    [Parameter]
    public string? Id { get; set; } 


    DisplayPatient displayPatient = new DisplayPatient();

  
    protected override async Task OnParametersSetAsync()
    {

        var currentUser = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        string role = currentUser.Claims.Where(c => c.Type == "role").First().Value;




        if (role == RolesMegagen.Technician)
            displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/technician/getPatient/{Id}"))!;
        if (role == RolesMegagen.Doctor)
            displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/doctor/getPatient/{Id}"))!;

 





    }
    protected override void OnInitialized()
    {

        base.OnInitialized();
        navigationManager.LocationChanged += HandleLocationChanged!;
    }

    private void OpenPdf()
    {
        navigationManager.NavigateTo($"view-pdf/{Id}");
    }
    private void OpenVideo()
    {
        navigationManager.NavigateTo($"view-video/{Id}");
    }
    private void OpenMenu()
    {
        navigationManager.NavigateTo($"/");
    }
    private async Task Refresh()
    {
        await _jsRuntime.InvokeVoidAsync("location.reload");
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs args)
    {

     
        if (!args.Location.Contains("view-stl"))
        {
            _jsRuntime.InvokeVoidAsync("destroy");

            _jsRuntime.InvokeVoidAsync("eval", $"document.getElementById('header').style.display = 'flex';");

        }else
        {
            //emptyCache
            _jsRuntime.InvokeVoidAsync("emptyCache");
            _jsRuntime.InvokeVoidAsync("initScene");
        }
    }

    private void HideHeader()
    {

        _jsRuntime.InvokeVoidAsync("eval", $"document.getElementById('header').style.display = 'none';");
    }

    List<string> files = new List<string>();



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {



        if (firstRender)
        {
            HideHeader();
            try
            {
                //call Javascript function: destroyContainer

                await _jsRuntime.InvokeVoidAsync("destroyContainer");


                var currentUser = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
                string role = currentUser.Claims.Where(c => c.Type == "role").First().Value;

             
                
                if (role == RolesMegagen.Technician)
                    displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/technician/getPatient/{Id}"))!;
                if (role == RolesMegagen.Doctor)
                    displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/doctor/getPatient/{Id}"))!;

            

                await DoThings();
            }
            catch (Exception )
            {

            }

        }


         
    }

    public async Task DoThings()
    {


        string jsonFileLink = displayPatient.Files.Where(f => f.Name.Trim().ToLower().EndsWith(".json")).First().Name;
        string azureJsonFileLink = await _httpClient.GetStringAsync($"/api/Storage/getFileLink/{jsonFileLink}");
        files.Add(azureJsonFileLink);
        string[] stlFilesLinks = displayPatient.Files.Where(f => f.Name.Trim().ToLower().EndsWith(".stl")).Select(f => f.Name).ToArray();
        foreach (string stlFileLink in stlFilesLinks)
        {
            string azureLink = await _httpClient.GetStringAsync($"/api/Storage/getFileLink/{stlFileLink}");
            files.Add(azureLink);
        }

        await _jsRuntime.InvokeVoidAsync("initialize3DViewer", (object)(files.ToArray()));
    }


}
