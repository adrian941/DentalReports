@page "/video/{id}"
@using System.Net;
@using System.Security.Claims
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<head>
    <link rel="stylesheet" href="css/megagen.css">
    <link rel="stylesheet" href="css/video.css">
    <meta property="og:title" content="@ogTitle">
</head>


<div class="video-container">

    <div class="el el1">
        <div class="megagen-upper-btns-container">
            <button class="menu-button " @onclick="OpenMenu" ></button>
            <button class="pdf-button " @onclick="OpenPdf"></button>
            <button class="stl-button " @onclick="OpenStl"></button>
            <button class="video-button" @onclick="OpenVideo"></button>
        </div>

    </div>


    <div class="el el2">
        <h6> @displayPatient.FirstName @displayPatient.LastName </h6>
    </div>



    <div class="el el3">
        <video id="myVideo" controls playsinline poster="images/video-poster.jpg">
            <source src="@VideoSource" type="video/mp4" />
        </video>

    </div>




    <div class="el el4">
        @if (VideoTitles != null)
        {
            if (VideoTitles.Count != 0)
            {
                int i = 0;
                foreach (var videoTitle in VideoTitles)
                {
                    i++;
                    <button class="btn-video" id=@($"btn-{i}") @onclick="()=>SeekToJs(videoTitle.seconds)"> <span class="clock">@($"{videoTitle.clock_minutes}:{videoTitle.clock_seconds}")</span> @videoTitle.title </button>
                     


                } 
            }
        }
    </div>

</div>






<br>









@code {

    private string ogTitle = "Megagen Reports";
    [Parameter]
    public string Id { get; set; } = "";


    private string VideoSource = "";
    private string TextSource = "";
    private List<VideoTitle> VideoTitles = new List<VideoTitle>();



    DisplayPatient displayPatient = new DisplayPatient();

    private async Task SeekToJs(int totalSeconds)
    {
        await _jsRuntime.InvokeVoidAsync("seekToJs", totalSeconds);
    }
    private void OpenPdf()
    {
        if (displayPatient.HasPdf)
        {
            navigationManager.NavigateTo($"pdf/{Id}");
        }
        else
        {
            //Alert Message with jsinterop

            _jsRuntime.InvokeVoidAsync("alert", "No PDF File Found");

        }

    }
    private void OpenStl()
    {
        if (displayPatient.HasStl)
        {
            navigationManager.NavigateTo($"3d-viewer/{Id}");
        }
        else
        {
            _jsRuntime.InvokeVoidAsync("alert", "No 3D Files Found");
        }

    }
    private void OpenVideo()
    {
        navigationManager.NavigateTo($"video/{Id}", true);
    }
    private void OpenMenu()
    {
        navigationManager.NavigateTo($"/");
    }


    protected override async Task OnParametersSetAsync()
    {
        ClaimsPrincipal? currentUser = null;
        string role = "";

        try
        {
            currentUser = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
            role = currentUser.Claims.Where(c => c.Type == "role").First().Value;
        }
        catch (Exception)
        {
            //navigate to Login Page
            navigationManager.NavigateTo($"/Login", true);
            return;
        }




        if (role == RolesMegagen.Technician)
        {
            try
            {
                displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/technician/getPatient/{Id}"))!;
            }
            catch (Exception )
            {
                navigationManager.NavigateTo($"/NotAuthorized",true);
                return;
            }
            if(displayPatient == null)
            {
                navigationManager.NavigateTo($"/NotAuthorized");
                return;
            }






        }
        if (role == RolesMegagen.Doctor)
        {
            try
            {
                displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/doctor/getPatient/{Id}"))!;
            }
            catch (Exception)
            {
                navigationManager.NavigateTo($"/NotAuthorized", true);
                return;
            }
            if (displayPatient == null)
            {
                navigationManager.NavigateTo($"/NotAuthorized", true);
                return;
            }
        }
        if(role == RolesMegagen.Admin)
        {
            try
            {
                displayPatient = (await _httpClient.GetFromJsonAsync<DisplayPatient>($"api/admin/getPatient/{Id}"))!;
            }
            catch (Exception)
            {
                navigationManager.NavigateTo($"/NotAuthorized", true);
                return;
            }
            if (displayPatient == null)
            {
                navigationManager.NavigateTo($"/NotAuthorized", true);
                return;
            }
        }



      
        ogTitle = $"{displayPatient.FirstName} {displayPatient.LastName}";


        var x = displayPatient.Files;


        string videoFileName = displayPatient.Files.Where(f => f.Name.Trim().ToLower().EndsWith(".mp4")).First().Name;
        Console.WriteLine(videoFileName);
        VideoSource = await _httpClient.GetStringAsync($"/api/Storage/getFileLink/{videoFileName}");



        string textFileName = displayPatient.Files.Where(f => f.Name.Trim().ToLower().EndsWith("_video_config.txt")).First().Name;


        TextSource = await _httpClient.GetStringAsync($"/api/Storage/getFileLink/{textFileName}");




        string textInside = await _httpClient.GetStringAsync(TextSource);

        string[] lines = textInside.Trim().Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);


        foreach (string line in lines)
        {
            string currentLine = line.Trim();
            int index = currentLine.IndexOf(' ');
            string left = currentLine.Substring(0, index);
            string right = currentLine.Substring(index + 1);

            string[] times = left.Split(':');
            int minutes = Convert.ToInt32(times[0]);
            int seconds = Convert.ToInt32(times[1]);
            int totalSeconds = minutes * 60 + seconds;

            VideoTitles.Add(new VideoTitle(totalSeconds, right));



        }
        await RefreshVideo();


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshVideo();
        }
    }

    private async Task RefreshVideo()
    {
        await _jsRuntime.InvokeVoidAsync("refreshVideoJs");

    }
    private async Task SeekTo(int seconds)
    {
        await _jsRuntime.InvokeVoidAsync("seekToJs", seconds);

    }

    public class VideoTitle
    {
        public int seconds { get; set; }
        public string title { get; set; }
        public string clock_minutes { get; set; }
        public string clock_seconds { get; set; }

        public VideoTitle(int seconds, string title)
        {
            this.seconds = seconds;
            this.title = title;

            this.clock_minutes = seconds / 60  + "";
            this.clock_seconds = (seconds % 60) >= 10 ? "" + (seconds % 60) : "0" + (seconds % 60);
        }
    }
}

